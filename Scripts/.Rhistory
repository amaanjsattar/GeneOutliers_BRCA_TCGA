# Remove rows lacking survival status
meta.clinic.patient <- subset(
meta.clinic.patient,
meta.clinic.patient$Overall.Survival.Status != '')
names(meta.clinic.patient)[names(meta.clinic.patient) == 'Overall.Survival..Months.'] <- 'OS.Months'
names(meta.clinic.patient)[names(meta.clinic.patient) == 'Overall.Survival.Status'] <- 'OS.Status'
meta.fpkm <- fpkm.tumor.symbol.filter.symbol
meta.symbols <- as.data.frame(meta.fpkm$Symbol)
meta.fpkm <- meta.fpkm[rownames(outlier.patient.tag.01), ]
# Remove rows with NA values in the 'Symbol' column
meta.fpkm <- meta.fpkm[complete.cases(meta.fpkm$Symbol), ]
rownames(meta.fpkm) <- meta.fpkm$Symbol
meta.fpkm$Symbol <- NULL
# Convert the patient IDs in 'meta.clinic.patient' to the desired format (with dashes)
colnames(meta.fpkm) <- gsub("\\.", "-", colnames(meta.fpkm))
# Transpose the 'meta.fpkm' dataframe to have patients as rows and genes as columns
meta.fpkm <- t(meta.fpkm)
# Get the common patient IDs between 'meta.clinic.patient' and 'meta.fpkm'
common.patients <- intersect(rownames(meta.clinic.patient), rownames(meta.fpkm))
# Subset 'meta.fpkm' to include only the common patients
meta.fpkm <- meta.fpkm[common.patients, ]
meta.clinic.patient <- meta.clinic.patient[common.patients, ]
# Reorder meta.fpkm so that it matches the order of meta.clinic.patient
meta.fpkm <- meta.fpkm[match(rownames(meta.clinic.patient), rownames(meta.fpkm)), ]
binary.survival <- function(brca.data, old.col.name, new.col.name) {
brca.data[[new.col.name]] <- ifelse(
grepl('^1:', brca.data[[old.col.name]]), 1, 0)
return(brca.data)
};
create.surv <- function(brca.data, survival.time, survival.status) {
surv.obj <- Surv(as.numeric(brca.data[[survival.time]]),
brca.data[[survival.status]])
return(surv.obj)
};
####################################################################################################
meta.clinic.patient <- binary.survival(
meta.clinic.patient, 'OS.Status', 'OS.Status'
);
meta.surv.cox <- create.surv(
meta.clinic.patient, 'OS.Months', 'OS.Status'
);
# Create a list to store the results of the Cox models and their summaries
cox.model.results <- list()
gene.names <- colnames(meta.fpkm)
# Loop through each gene and fit univariate Cox models
for (gene in gene.names) {
# Extract the FPKM values for the current gene (as a vector)
fpkm.values <- log2(as.numeric(meta.fpkm[, gene]) + 1)
# Fit the Cox proportional hazards model using the 'coxph' function from the 'survival' package
cox.model <- coxph(meta.surv.cox ~ fpkm.values)
# Store the model and its summary in the cox.model.results list
cox.model.results[[gene]] <- list(model = cox.model, summary = summary(cox.model))
}
# Initialize empty vectors to store gene names and p-values
gene_names_vector <- c()
p_values_vector <- c()
# Loop through each gene in gene.names and extract the p-value from the summary
for (gene_name in gene.names) {
# Access the summary object for the specific gene
summary_for_gene <- cox.model.results[[gene_name]]$summary
# Access the p-value for the gene
p_value <- summary_for_gene$coefficients["fpkm.values", "Pr(>|z|)"]
# Store the gene name and p-value in the corresponding vectors
gene_names_vector <- c(gene_names_vector, gene_name)
p_values_vector <- c(p_values_vector, p_value)
}
# Create a data frame with gene names and p-values
p_values_data <- data.frame(GeneName = gene_names_vector, PValue = p_values_vector)
# Print the data frame
print(p_values_data)
# Sort the dataframe in ascending order of p-values
meta_p_values <- p_values_data[order(p_values_data$PValue), ]
# View the sorted dataframe
View(meta_p_values)
meta_fdr_corrected_p_values <- p.adjust(meta_p_values$PValue, method = 'fdr')
meta_p_values$FDR.Corrected <- meta_fdr_corrected_p_values
save(cox.model.results, meta_p_values, file = 'meta.cox.RData')
# View the sorted dataframe
View(meta_p_values)
library(BoutrosLab.plotting.general)
library(BoutrosLab.utilities)
library(BoutrosLab.plotting.survival)
load('meta.cox.RData')
cox.gene.names <- names(cox.model.results)
result_df <- data.frame(GeneName = character(0), PValue = numeric(0), HR = numeric(0))
for (gene_name in cox.gene.names) {
# Extract p-value from cox_model_results
p_value <- cox.model.results[[gene_name]]$summary$coefficients["fpkm.values", "Pr(>|z|)"]
# Extract hazard ratio from cox_model_results
hr <- exp(coef(cox.model.results[[gene_name]]$model)["fpkm.values"])
# Create a new row for the gene in the result dataframe
new_row <- data.frame(GeneName = gene_name, PValue = p_value, HR = hr)
# Append the new row to the result dataframe
result_df <- rbind(result_df, new_row)
}
colors <- ifelse(-log10(result_df$PValue) < -log10(0.05), "gray",
ifelse(-log10(result_df$PValue) >= -log10(0.05) & log2(result_df$HR) < 0, "blue",
"red"))
result_df$Color <- colors
create.scatterplot(
height = 15,
width = 15,
formula = -log10(PValue) ~ log2(HR),
data = result_df,
main = 'METABRIC: Univariate Cox Models',
main.cex = 1.2,
ylab.label = expression(-log[10]("P-Value")),
xlab.label = expression(log[2]("Hazard Ratio")),
ylab.cex = 1,
xlab.cex = 1,
xaxis.cex = 1,
yaxis.cex = 1,
alpha = 0.5,
col = colors,
abline.h = -log10(0.05),
abline.col = 'red',
abline.lwd = 1.2,
top.padding = 1
)
result_df$FDR.Corrected <- p.adjust(result_df$PValue, method = 'fdr')
colors_meta_fdr <- ifelse(-log10(result_df$FDR.Corrected) < -log10(0.05), "gray",
ifelse(-log10(result_df$FDR.Corrected) >= -log10(0.05) & log2(result_df$HR) < 0, "blue",
"red"))
create.scatterplot(
height = 15,
width = 15,
formula = -log10(FDR.Corrected) ~ log2(HR),
data = result_df,
main = 'METABRIC: Univariate Cox Models',
main.cex = 1.2,
ylab.label = expression(-log[10]("FDR-Adjusted P-Value")),
xlab.label = expression(log[2]("Hazard Ratio")),
ylab.cex = 1,
xlab.cex = 1,
xaxis.cex = 1,
yaxis.cex = 1,
alpha = 0.5,
col = colors_meta_fdr,
top.padding = 1,
xaxis.tck = c(1, 0),
yaxis.tck = c(1, 0)
)
create.histogram(x = result_df$PValue,
data = result_df,
main = 'METABRIC Univariate Cox Models, Unadjusted P-Values',
main.cex = 1.2,
xlimits = c(0.0, 1.0),
breaks = seq(0, 1, 0.05),
xat = seq(0, 1, 0.1),
xaxis.cex = 0.9,
yat = seq(0, 40, 5),
yaxis.cex = 0.9,
ylab.label = 'Frequency',
xlab.cex = 1.25,
ylab.cex = 1.25,
xlab.label = 'P-Value',
ylimits = c(0, 35),
col = 'skyblue2',
abline.v = 0.05,
abline.col = 'red',
abline.lwd = 2
)
#TCGA SCATTER PLOTS
load('tcga.cox.RData')
tcga.gene.names <- names(tcga.cox.results)
tcga_result_df <- data.frame(GeneName = character(0), PValue = numeric(0), HR = numeric(0))
for (gene_name in tcga.gene.names) {
# Extract p-value from cox_model_results
p_value <- tcga.cox.results[[gene_name]]$summary$coefficients["fpkm.values", "Pr(>|z|)"]
# Extract hazard ratio from cox_model_results
hr <- exp(coef(tcga.cox.results[[gene_name]]$model)["fpkm.values"])
# Create a new row for the gene in the result dataframe
new_row <- data.frame(GeneName = gene_name, PValue = p_value, HR = hr)
# Append the new row to the result dataframe
tcga_result_df <- rbind(tcga_result_df, new_row)
}
# SCATTER PLOTS: x = LOG2(HR) , y = -LOG10(PVAL)
colors_tcga <- ifelse(-log10(tcga_result_df$PValue) < -log10(0.05), "gray",
ifelse(-log10(tcga_result_df$PValue) >= -log10(0.05) & log2(tcga_result_df$HR) < 0, "blue",
"red"))
create.scatterplot(
height = 15,
width = 15,
formula = -log10(PValue) ~ log2(HR),
data = tcga_result_df,
main = 'TCGA: Univariate Cox Models',
main.cex = 1.2,
ylab.label = expression(-log[10]("P-Value")),
xlab.label = expression(log[2]("Hazard Ratio")),
ylab.cex = 1,
xlab.cex = 1,
xaxis.cex = 1,
yaxis.cex = 1,
alpha = 0.5,
col = colors_tcga,
abline.h = -log10(0.05),
abline.col = 'red',
abline.lwd = 1.2,
top.padding = 1
)
tcga_result_df$FDR.Corrected <- p.adjust(tcga_result_df$PValue, method = 'fdr')
create.scatterplot(
height = 15,
width = 15,
formula = -log10(FDR.Corrected) ~ log2(HR),
data = tcga_result_df,
main = 'TCGA: Univariate Cox Models',
main.cex = 1.2,
ylab.label = expression(-log[10]("FDR-Adjusted P-Value")),
xlab.label = expression(log[2]("Hazard Ratio")),
ylab.cex = 1,
xlab.cex = 1,
xaxis.cex = 1,
yaxis.cex = 1,
ylimits = c(0, 1.5),
alpha = 0.5,
col = 'gray',
abline.h = -log10(0.05),
abline.col = 'red',
abline.lwd = 1.2,
top.padding = 1
)
create.scatterplot(
height = 10,
width = 10,
formula = -log10(FDR.Corrected) ~ log2(HR),
data = tcga_result_df,
main = 'TCGA: Univariate Cox Models',
main.cex = 1.2,
ylab.label = expression(-log[10]("FDR-Adjusted P-Value")),
xlab.label = expression(log[2]("Hazard Ratio")),
ylab.cex = 1,
xlab.cex = 1,
xaxis.cex = 1,
yaxis.cex = 1,
alpha = 0.5,
col = 'gray',
top.padding = 1,
xaxis.tck = c(0, 1),
yaxis.tck = c(0, 1)
)
create.histogram(x = tcga_result_df$PValue,
data = tcga_result_df,
main = 'TCGA Univariate Cox Models, P-Values',
main.cex = 1.2,
xlimits = c(0.0, 1.0),
breaks = seq(0, 1, 0.05),
xat = seq(0, 1, 0.1),
xaxis.cex = 0.9,
yaxis.cex = 0.9,
ylab.label = 'Frequency',
xlab.cex = 1.25,
ylab.cex = 1.25,
xlab.label = 'P-Value',
col = 'skyblue2',
abline.v = 0.05,
abline.col = 'red',
abline.lwd = 2
)
colnames(meta_p_values) <- c('GeneName', 'Meta.P.Value', 'Meta.FDR')
colnames(tcga_p_values) <- c('GeneName', 'TCGA.P.Value', 'TCGA.FDR')
# Get the common 'GeneName' values
common_genes <- intersect(result_df$GeneName, tcga_result_df$GeneName)
# Subset both dataframes to keep only the rows with common 'GeneName'
cumulative_result_df <- result_df[result_df$GeneName %in% common_genes, ]
cumulative_result_df <- merge(cumulative_result_df, tcga_result_df[tcga_result_df$GeneName %in% common_genes, ], by = 'GeneName')
colnames(cumulative_result_df) <- c('GeneName', 'Meta.P', 'Meta.HR', 'Meta.Color', 'Meta.FDR',
'TCGA.P', 'TCGA.HR', 'TCGA.FDR')
create.scatterplot(
height = 15,
width = 15,
formula = TCGA.P ~ Meta.P,
data = cumulative_result_df,
main = 'METABRIC-TCGA Comparison: P-Values',
ylab.label = expression('TCGA P-Value'),
xlab.label = expression('METABRIC P-Value'),
main.cex = 1.2,
ylab.cex = 1,
xlab.cex = 1,
xaxis.cex = 1,
yaxis.cex = 1,
alpha = 0.5,
col = 'black',
top.padding = 1,
add.xyline = TRUE,
xaxis.tck = c(0, 1),
yaxis.tck = c(0, 1),
)
create.scatterplot(
height = 15,
width = 15,
formula = log2(TCGA.HR) ~ log2(Meta.HR),
data = cumulative_result_df,
main = 'METABRIC-TCGA Comparison: Hazard Ratios',
ylab.label = expression(log[2]("METABRIC Hazard Ratio")),
xlab.label = expression(log[2]('TCGA Hazard Ratio')),
main.cex = 1.2,
ylab.cex = 1,
xlab.cex = 1,
xaxis.cex = 1,
yaxis.cex = 1,
alpha = 0.5,
col = 'black',
add.xyline = TRUE,
top.padding = 1,
xaxis.tck = c(0, 1),
yaxis.tck = c(0, 1)
)
create.scatterplot(
height = 15,
width = 15,
formula = log2(TCGA.HR) ~ log2(Meta.HR),
data = cumulative_result_df,
main = 'METABRIC-TCGA Comparison: Hazard Ratios',
ylab.label = expression(ln("METABRIC Hazard Ratio")),
xlab.label = expression(ln('TCGA Hazard Ratio')),
main.cex = 1.2,
ylab.cex = 1,
xlab.cex = 1,
xaxis.cex = 1,
yaxis.cex = 1,
alpha = 0.5,
col = 'black',
add.xyline = TRUE,
top.padding = 1,
xaxis.tck = c(0, 1),
yaxis.tck = c(0, 1)
)
create.scatterplot(
height = 15,
width = 15,
formula = ln(TCGA.HR) ~ ln(Meta.HR),
data = cumulative_result_df,
main = 'METABRIC-TCGA Comparison: Hazard Ratios',
ylab.label = expression(ln("METABRIC Hazard Ratio")),
xlab.label = expression(ln('TCGA Hazard Ratio')),
main.cex = 1.2,
ylab.cex = 1,
xlab.cex = 1,
xaxis.cex = 1,
yaxis.cex = 1,
alpha = 0.5,
col = 'black',
add.xyline = TRUE,
top.padding = 1,
xaxis.tck = c(0, 1),
yaxis.tck = c(0, 1)
)
create.scatterplot(
height = 15,
width = 15,
formula = log(TCGA.HR) ~ log(Meta.HR),
data = cumulative_result_df,
main = 'METABRIC-TCGA Comparison: Hazard Ratios',
ylab.label = expression(ln("METABRIC Hazard Ratio")),
xlab.label = expression(ln('TCGA Hazard Ratio')),
main.cex = 1.2,
ylab.cex = 1,
xlab.cex = 1,
xaxis.cex = 1,
yaxis.cex = 1,
alpha = 0.5,
col = 'black',
add.xyline = TRUE,
top.padding = 1,
xaxis.tck = c(0, 1),
yaxis.tck = c(0, 1)
)
create.scatterplot(
height = 15,
width = 15,
formula = log(TCGA.HR) ~ log(Meta.HR),
data = cumulative_result_df,
main = 'METABRIC-TCGA Comparison: Hazard Ratios',
ylab.label = expression(ln("METABRIC Hazard Ratio")),
xlab.label = expression(ln('TCGA Hazard Ratio')),
main.cex = 1.2,
ylab.cex = 1,
xlab.cex = 1,
xaxis.cex = 1,
yaxis.cex = 1,
alpha = 0.5,
col = 'black',
add.xyline = TRUE,
top.padding = 1,
xaxis.tck = c(1, 0),
yaxis.tck = c(1, 0)
)
create.scatterplot(
height = 15,
width = 15,
formula = -log10(PValue) ~ log2(HR),
data = tcga_result_df,
main = 'TCGA: Univariate Cox Models',
main.cex = 1.2,
ylab.label = expression(-log[10]("P-Value")),
xlab.label = expression(log[2]("Hazard Ratio")),
ylab.cex = 1,
xlab.cex = 1,
xaxis.cex = 1,
yaxis.cex = 1,
alpha = 0.5,
col = colors_tcga,
abline.h = -log10(0.05),
abline.col = 'red',
abline.lwd = 1.2,
top.padding = 1,
xaxis.tck = c(1, 0),
yaxis.tck = c(1, 0)
)
create.scatterplot(
height = 15,
width = 15,
formula = -log10(FDR.Corrected) ~ log2(HR),
data = tcga_result_df,
main = 'TCGA: Univariate Cox Models',
main.cex = 1.2,
ylab.label = expression(-log[10]("FDR-Adjusted P-Value")),
xlab.label = expression(log[2]("Hazard Ratio")),
ylab.cex = 1,
xlab.cex = 1,
xaxis.cex = 1,
yaxis.cex = 1,
ylimits = c(0, 1.5),
alpha = 0.5,
col = 'gray',
abline.h = -log10(0.05),
abline.col = 'red',
abline.lwd = 1.2,
top.padding = 1,
xaxis.tck = c(1, 0),
yaxis.tck = c(1, 0)
)
create.scatterplot(
height = 15,
width = 15,
formula = -log10(FDR.Corrected) ~ log2(HR),
data = tcga_result_df,
main = 'TCGA: Univariate Cox Models',
main.cex = 1.2,
ylab.label = expression(-log[10]("FDR-Adjusted P-Value")),
xlab.label = expression(log[2]("Hazard Ratio")),
ylab.cex = 1,
xlab.cex = 1,
xaxis.cex = 1,
yaxis.cex = 1,
ylimits = c(0, 1.5),
alpha = 0.5,
col = 'gray',
top.padding = 1,
xaxis.tck = c(1, 0),
yaxis.tck = c(1, 0)
)
create.scatterplot(
height = 15,
width = 15,
formula = -log10(FDR.Corrected) ~ log2(HR),
data = tcga_result_df,
main = 'TCGA: Univariate Cox Models',
main.cex = 1.2,
ylab.label = expression(-log[10]("FDR-Adjusted P-Value")),
xlab.label = expression(log[2]("Hazard Ratio")),
ylab.cex = 1,
xlab.cex = 1,
xaxis.cex = 1,
yaxis.cex = 1,
alpha = 0.5,
col = 'gray',
top.padding = 1,
xaxis.tck = c(1, 0),
yaxis.tck = c(1, 0)
)
create.scatterplot(
height = 15,
width = 15,
formula = TCGA.P ~ Meta.P,
data = cumulative_result_df,
main = 'METABRIC-TCGA Comparison: P-Values',
ylab.label = expression('TCGA P-Value'),
xlab.label = expression('METABRIC P-Value'),
main.cex = 1.2,
ylab.cex = 1,
xlab.cex = 1,
xaxis.cex = 1,
yaxis.cex = 1,
alpha = 0.5,
col = 'black',
top.padding = 1,
add.xyline = TRUE,
xaxis.tck = c(1, 0),
yaxis.tck = c(1, 0),
)
create.scatterplot(
height = 15,
width = 15,
formula = log(TCGA.HR) ~ log(Meta.HR),
data = cumulative_result_df,
main = 'METABRIC-TCGA Comparison: Hazard Ratios',
ylab.label = expression(ln("TCGA Hazard Ratio")),
xlab.label = expression(ln('METABRIC Hazard Ratio')),
main.cex = 1.2,
ylab.cex = 1,
xlab.cex = 1,
xaxis.cex = 1,
yaxis.cex = 1,
alpha = 0.5,
col = 'black',
add.xyline = TRUE,
top.padding = 1,
xaxis.tck = c(1, 0),
yaxis.tck = c(1, 0)
)
